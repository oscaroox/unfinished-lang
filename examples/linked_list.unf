data ListNode[T](
    value: T,
    next?: ListNode<T>,
) {
    fn new (value) {
        ListNode {
            value,
            next: null,
        }
    }
};


data LinkedList[T](
    head: ListNode<T>,
 ) {
    fn new(head: T) => LinkedList {
        head
    }
    

    fn size(self) {
        let count = 0;
        let node = self.head;
        loop node != null {
            count += 1;
            node = node.next;
        };
        count
    }

    fn clear(self) {
        self.head = null;
    }

    fn get_last(self) {
        let last_node = self.head;
        if last_node != null {
            loop last_node.next != null {
                last_node = last_node.next;
            }
        };
        last_node
    }

    fn get_first(self) => self.head
};

let node1 = ListNode.new(2);
let node2 = ListNode.new(5);
let node3 = ListNode.new(77);

node2.next = node3;
node1.next = node2;

let list = LinkedList.new(node1);
println(list);

println("next value: $(list.head.next.value)");
println("list count: $(list.size())");

println("first_node: $(list.get_first())");
println("last_node: $(list.get_last())");