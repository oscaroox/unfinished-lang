program ::=                     exprStmt* EOF ;
exprStmt ::=                    expression ";" ;

expression ::=                  
                                | letExpr 
                                | ifExpr 
                                | blockExpr 
                                | returnExpr 
                                | dataClassExpr 
                                | loopExpr
                                | breakExpr
                                | continueExpr
                                | assignment ;

letExpr ::=                     "let" IDENTIFIER (("=" | ":=") expression)? ";" ;

FUN ::=                         "fun" ( "("? parameters ")"? )? blockExpr;
parameters ::=                  IDENTIFIER ( "," IDENTIFIER )* ;
blockExpr ::=                   "{" statements* "}" ;

ifExpr ::=                      "if" "("? expression ")"? block ("else" block)? ;
returnExpr ::=                  "return" ( expression )? ;

dataClassExpr ::=               "data" IDENTIFIER "{" ( dataClassFields )? "}" "::" "{"  ( dataClassMethod )*  "}";
dataClassMethod ::=             "fun" IDENTIFIER "(" ( SELF ",") ?   parameters ")" blockExpr
dataClassFields ::=             IDENTIFIER ("," IDENTIFIER)* ;

loopExpr ::=                    "loop" ( expression ( in expression )?   )? blockExpr ;
breakExpr ::=                   "break" ;
continueExpr ::=                "continue" ;

assignment ::=                  IDENTIFIER "=" assignment | or ;
or ::=                          and ("||" and)* ;
and ::=                         equality ("&&", equality)*;
equality ::=                    comparison (("==" | "!=") comparison)* ; 
comparison ::=                  term (( "<" | "<=" | ">" | "=>" ) term)* ;

term ::=                        factor (("+"| "-") factor)* ;
factor ::=                      unary (("*" | "/") unary)* ;
unary ::=                       ("-" | "+" | "!") unary | primary ;
call ::=                        primary "(" arguments ")" ; 
arguments ::=                   expression ("," expression)* ;
primary ::= 
                                | STRING
                                | INT
                                | FLOAT
                                | ARRAY
                                | TRUE
                                | FALSE
                                | FUN
                                | NULL
                                | SELF
                                | DATACLASSINSTANCE
                                | IDENTIFIER
                                | "(" expression ")" ;

DATACLASSINSTANCE ::=       IDENTIFIER "{" ( dataClassInstanceFields  )? "}" ; 
dataClassInstanceFields ::=     IDENTIFIER ( (",", dataClassInstanceField)*  | ":" expression ("," dataClassInstanceField)* ) ;
